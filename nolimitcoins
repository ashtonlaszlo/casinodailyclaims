// ==UserScript==
// @name         NoLimitCoins Daily
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  claim daily bonus on NoLimitCoins
// @author       ashtonlaszlo
// @match        https://nolimitcoins.com/*
// @grant        GM.setValue
// @grant        GM.getValue
// @grant        window.focus
// ==/UserScript==

(function() {
    'use strict';
    console.log('Tampermonkey script to claim daily bonus on NoLimitCoins is running.');

    const ONE_DAY_MS = 24 * 60 * 60 * 1000;

    function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function clickLuckyWheelButton() {
        const luckyWheelButton = document.querySelector('#__nuxt > div > div.fixed-wrapper > header > div:nth-child(1) > nav > span');
        if (luckyWheelButton) {
            console.log('Lucky Wheel button found:', luckyWheelButton);
            await delay(3000);
            luckyWheelButton.click();
            console.log('Lucky Wheel button clicked.');
            await delay(3000);
            clickSpinAndWinButton();
        } else {
            console.log('Lucky Wheel button not found, retrying...');
            setTimeout(clickLuckyWheelButton, 5000);
        }
    }

    async function clickSpinAndWinButton() {
        const spinAndWinButton = document.querySelector('#ModalDailyWheel > div > div > div.wrapper > div:nth-child(1) > button');
        if (spinAndWinButton) {
            console.log('Spin & Win button found:', spinAndWinButton);
            await delay(3000);
            spinAndWinButton.click();
            console.log('Spin & Win button clicked.');
            await delay(3000);
            scheduleNextClaim();
        } else {
            console.log('Spin & Win button not found, retrying...');
            setTimeout(clickSpinAndWinButton, 5000);
        }
    }

    async function init() {
        const nextClaimDateTime = await GM.getValue('nextClaimDateTime', 0);
        const currentTime = Date.now();
        if (currentTime >= nextClaimDateTime) {
            console.log('It is time to claim the bonus. Starting the process...');
            await delay(3000);
            clickLuckyWheelButton();
        } else {
            const waitTime = nextClaimDateTime - currentTime;
            console.log(`Next claim scheduled in ${waitTime / 1000 / 60 / 60} hours.`);
            setTimeout(init, waitTime);
        }
    }

    async function scheduleNextClaim() {
        const nextClaimDateTime = Date.now() + ONE_DAY_MS + (Math.random() * 60 * 60 * 1000); // 24 to 25 hours
        await GM.setValue('nextClaimDateTime', nextClaimDateTime);
        console.log('Next claim scheduled at:', new Date(nextClaimDateTime).toString());
    }

    setTimeout(init, 10000);
})();
