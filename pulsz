// ==UserScript==
// @name         Pulsz Daily
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  claim daily bonus on Pulsz.com
// @author       ashtonlaszlo
// @match        https://www.pulsz.com/home
// @grant        GM.setValue
// @grant        GM.getValue
// @grant        window.focus
// ==/UserScript==

(function() {
    'use strict';
    console.log('Tampermonkey script to claim daily bonus on Pulsz.com is running.');

    const ONE_DAY_MS = 24 * 60 * 60 * 1000;
    const FIVE_MINUTES_MS = 5 * 60 * 1000;

    function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function checkForPopupAndClaim() {
        const popup = document.querySelector('body > div.mt-modal-root > div.styles_root___abPW > div > div');
        if (popup) {
            console.log('Popup found:', popup);
            const claimButton = document.querySelector('body > div.mt-modal-root > div.styles_root___abPW > div > div > button.mt-button-base-root.mt-button-contained.styles_root__YiphY.styles_claimBtn__6uU8x.styles_SC___zQGO');
            if (claimButton) {
                console.log('Claim button found:', claimButton);
                await delay(3000);
                claimButton.click();
                console.log('Claim button clicked.');
                await delay(3000);
                scheduleNextClaim();
            } else {
                console.log('Claim button not found, retrying...');
                setTimeout(checkForPopupAndClaim, 5000);
            }
        } else {
            console.log('Popup not found, will retry after 5 minutes...');
            await delay(FIVE_MINUTES_MS);
            location.reload();
        }
    }

    async function init() {
        const nextClaimDateTime = await GM.getValue('nextClaimDateTime', 0);
        const currentTime = Date.now();
        if (currentTime >= nextClaimDateTime) {
            console.log('It is time to claim the bonus. Starting the process...');
            await delay(3000);
            checkForPopupAndClaim();
        } else {
            const waitTime = nextClaimDateTime - currentTime;
            console.log(`Next claim scheduled in ${waitTime / 1000 / 60 / 60} hours.`);
            setTimeout(init, waitTime);
        }
    }

    async function scheduleNextClaim() {
        const nextClaimDateTime = Date.now() + ONE_DAY_MS + (Math.random() * 60 * 60 * 1000); // 24 to 25 hours
        await GM.setValue('nextClaimDateTime', nextClaimDateTime);
        console.log('Next claim scheduled at:', new Date(nextClaimDateTime).toString());
    }

    setTimeout(init, 10000);
})();
